#include <WiFi.h>
#include <esp_now.h>
#include <Wire.h>
#include <MPU6050.h>

MPU6050 mpu;

// MAC address of receiver ESP32
uint8_t receiverMac[] = {0x5C, 0x01, 0x3B, 0x73, 0xBD, 0xFC};

// Data structure to send
typedef struct struct_message {
  char direction[32];
} struct_message;

struct_message msg;

// Detect direction with realistic thresholds
String detectDirection(float ax, float ay) {
  if (ax < -0.5) return "Tilted Front ‚¨áÔ∏è";
  if (ax > 0.5) return "Tilted Back ‚¨ÜÔ∏è";
  if (ay > 0.5) return "Tilted Right ‚¨ÖÔ∏è";
  if (ay < -0.5) return "Tilted Left ‚û°Ô∏è";
  if (abs(ax) < 0.2 && abs(ay) < 0.2) return "Still üßò";
  return "Moving üåÄ";
}

// Callback after data is sent
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success ‚úÖ" : "Fail ‚ùå");
}

void setup() {
  Serial.begin(115200);
  Wire.begin(   );

  // Initialize MPU6050
  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed!");
    while (1);
  } else {
    Serial.println("MPU6050 connected!");
  }

  // Initialize ESP-NOW
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW Init Failed ‚ùå");
    return;
  }

  esp_now_register_send_cb(onDataSent);

  // Register the receiver peer
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, receiverMac, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer ‚ùå");
    return;
  }
}

void loop() {
  int16_t ax_raw, ay_raw, az_raw;
  mpu.getAcceleration(&ax_raw, &ay_raw, &az_raw);

  // Convert to g units
  float ax = ax_raw / 16384.0;
  float ay = ay_raw / 16384.0;

  String direction = detectDirection(ax, ay);
  direction.toCharArray(msg.direction, sizeof(msg.direction));

  // Print data to Serial Monitor
  Serial.println("==============");
  Serial.print("Raw ax: "); Serial.print(ax_raw);
  Serial.print(" | ay: "); Serial.println(ay_raw);
  Serial.print("G ax: "); Serial.print(ax, 2);
  Serial.print(" | ay: "); Serial.println(ay, 2);
  Serial.print("Detected Direction: ");
  Serial.println(direction);

  // Send via ESP-NOW
  esp_now_send(receiverMac, (uint8_t *) &msg, sizeof(msg));

  delay(1000); // Adjust as needed
}
